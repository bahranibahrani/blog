[{"content":"Aplikasi web sederhana untuk memvisualisasikan topologi jaringan berdasarkan data dari Cisco Discovery Protocol (CDP) yang diekspor ke dalam format file Excel.\nDeskripsi Aplikasi ini menggunakan library Streamlit di Python untuk membuat aplikasi web interaktif. Ia akan membaca file .xlsx yang berisi data CDP (seperti nama perangkat, alamat IP, port yang terhubung, dll.), kemudian menggunakan library networkx dan matplotlib untuk membuat dan menampilkan gambar topologi jaringan.\nFitur Membaca data perangkat jaringan dari file Excel. Membangun model graf dari topologi jaringan. Menampilkan visualisasi topologi jaringan melalui antarmuka web interaktif. Menggunakan ikon SVG untuk merepresentasikan tipe perangkat yang berbeda (router, switch, dll). Struktur Proyek . ├── app.py # Logika utama aplikasi Streamlit ├── data/ │ └── cdp_neighbors.xlsx # Contoh file data CDP └── img/ # Ikon untuk perangkat jaringan Instalasi \u0026amp; Penggunaan Instalasi library yang dibutuhkan:\npip install streamlit pandas networkx matplotlib openpyxl Jalankan aplikasi:\nstreamlit run app.py Buka browser web Anda dan kunjungi alamat yang muncul di terminal (biasanya http://localhost:8501).\nAnda akan melihat visualisasi topologi jaringan yang dihasilkan dari data Anda.\nContoh Hasil Berikut adalah contoh visualisasi yang dihasilkan oleh aplikasi:\nKontribusi Kontribusi dalam bentuk pull request sangat diterima. Untuk perubahan besar, silakan buka issue terlebih dahulu untuk mendiskusikan apa yang ingin Anda ubah.\n","permalink":"https://blog.bahrani.my.id/docs/catatan/proyek-visualisasi-jaringan-cdp/","summary":"Aplikasi web sederhana untuk memvisualisasikan topologi jaringan berdasarkan data dari Cisco Discovery Protocol (CDP) yang diekspor ke dalam format file Excel.\nDeskripsi Aplikasi ini menggunakan library Streamlit di Python untuk membuat aplikasi web interaktif. Ia akan membaca file .xlsx yang berisi data CDP (seperti nama perangkat, alamat IP, port yang terhubung, dll.), kemudian menggunakan library networkx dan matplotlib untuk membuat dan menampilkan gambar topologi jaringan.\nFitur Membaca data perangkat jaringan dari file Excel.","title":"Proyek Visualisasi Jaringan CDP dengan Streamlit"},{"content":"Sering kali kita membutuhkan sebuah lingkungan sandbox atau lab virtual yang ringan untuk eksperimen, development, atau sekadar mencoba perintah-perintah sistem. Menggunakan Virtual Machine (VM) penuh terkadang terasa berlebihan. Artikel ini akan memandu Anda membangun \u0026ldquo;Bahrani Labs\u0026rdquo;: sebuah lab berbasis kontainer Docker yang bisa diakses via SSH, lengkap dengan persistensi data dan konfigurasi siap pakai.\nLab ini hadir dengan fitur esensial seperti akses SSH, user cisco dengan hak sudo, volume persisten untuk data Anda, healthcheck untuk memonitor layanan, kebijakan restart otomatis, dan zona waktu yang sudah disesuaikan untuk Indonesia (Asia/Jakarta).\nPrasyarat Sebelum memulai, pastikan sistem Anda telah memenuhi syarat berikut:\nDocker \u0026amp; Docker Compose: Sudah terpasang dan berjalan. Port Host: Ada satu port yang tidak terpakai di mesin Anda (dalam contoh ini kita gunakan 9022). Sistem Operasi: Tutorial ini diuji pada Linux, MacOS, atau Windows dengan WSL 2. Arsitektur Sederhana Desainnya sangat sederhana. Kita akan menjalankan satu kontainer dari image kustom yang kita bangun. Port 22 (SSH) di dalam kontainer akan dipetakan ke port 9022 di komputer Anda, dan semua data di dalam direktori /home/cisco akan disimpan secara persisten.\nSecara singkat, alur koneksinya adalah: User -\u0026gt; SSH Client -\u0026gt; Host:9022 -\u0026gt; Container:22.\nFile Konfigurasi: Dockerfile \u0026amp; Compose Kita hanya butuh dua file untuk menjalankan lab ini.\nDockerfile File ini berisi instruksi untuk membangun image kontainer kita, mulai dari instalasi paket hingga pembuatan user.\n# Gunakan base image Ubuntu versi stabil FROM ubuntu:24.04 # Install semua paket yang dibutuhkan dalam satu layer RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ sudo \\ openssh-server \\ python3 \\ python3-pip \\ git \\ nano \\ net-tools \\ iputils-ping \\ netcat-openbsd \\ \u0026amp;\u0026amp; rm -rf /var/lib/apt/lists/* # Buat user \u0026#39;cisco\u0026#39; dan direktori home-nya RUN useradd -rm -d /home/cisco -s /bin/bash -g root -G sudo -u 1000 cisco # Set password default untuk user \u0026#39;cisco\u0026#39; (HARAP SEGERA GANTI) RUN echo \u0026#39;cisco:cisco\u0026#39; | chpasswd # Berikan hak sudo tanpa password untuk kemudahan di lingkungan lab RUN echo \u0026#39;cisco ALL=(ALL) NOPASSWD:ALL\u0026#39; \u0026gt;\u0026gt; /etc/sudoers # Buat direktori untuk SSH daemon RUN mkdir /var/run/sshd # Expose port SSH EXPOSE 22 # Perintah default untuk menjalankan SSH daemon di foreground CMD [\u0026#34;/usr/sbin/sshd\u0026#34;, \u0026#34;-D\u0026#34;] Penjelasan untuk setiap barisnya cukup sederhana: kita mulai dari ubuntu:24.04, menginstal semua tools, membuat user cisco dengan password cisco, memberikannya hak sudo, dan terakhir menjalankan server SSH saat kontainer dimulai.\ndocker-compose.yml File ini kita gunakan untuk mendefinisikan dan menjalankan kontainer bahrani-labs dengan semua konfigurasinya.\nversion: \u0026#34;3.9\u0026#34; services: bahrani-labs: container_name: bahrani-labs build: context: . dockerfile: Dockerfile image: bahrani-labs:latest restart: unless-stopped ports: - \u0026#34;9022:22\u0026#34; volumes: - bahrani-home:/home/cisco environment: TZ: \u0026#34;Asia/Jakarta\u0026#34; healthcheck: test: [\u0026#34;CMD\u0026#34;, \u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;nc -z 127.0.0.1 22 || exit 1\u0026#34;] interval: 30s timeout: 5s retries: 5 start_period: 20s volumes: bahrani-home: Di sini kita mendefinisikan semua properti layanan: build untuk membangun dari Dockerfile, restart: unless-stopped untuk menyala otomatis, ports untuk mapping port, volumes untuk persistensi data, dan healthcheck untuk memastikan SSH selalu berjalan.\nInstalasi dan Penggunaan Pertama Buat sebuah direktori baru di komputer Anda (misal, bahrani-labs). Di dalam direktori tersebut, buat file Dockerfile dan docker-compose.yml dengan isi seperti di atas. Buka terminal di direktori itu dan jalankan: docker compose up -d --build Setelah proses selesai, Anda bisa langsung terhubung via SSH: ssh cisco@localhost -p 9022 Masukkan password default: cisco. Perintah Sehari-hari Berikut adalah beberapa perintah dasar untuk mengelola lab Anda:\nMenghentikan Lab: docker compose stop Memulai Lab: docker compose start Melihat Logs: docker compose logs -f Masuk ke Kontainer (tanpa SSH): docker exec -it bahrani-labs bash Catatan Keamanan (Best Practices) Meskipun ini untuk lab, praktik keamanan dasar tetap penting:\nGanti Password: Hal pertama yang harus dilakukan setelah login adalah mengganti password default dengan perintah passwd. Gunakan SSH Key: Untuk keamanan lebih, nonaktifkan login dengan password dan gunakan SSH key. Batasi Akses Port: Di lingkungan produksi, batasi akses ke port 9022 hanya dari IP tepercaya menggunakan firewall. Kustomisasi dan Pengembangan Lanjutan Menambah Port Aplikasi: Ingin menjalankan server web? Tambahkan mapping port di docker-compose.yml, misalnya ports: [\u0026quot;9022:22\u0026quot;, \u0026quot;8080:80\u0026quot;]. Menambah Tools: Edit Dockerfile dan tambahkan paket lain yang Anda butuhkan di bagian apt-get install. Troubleshooting dan FAQ Tidak bisa SSH? Cek log (docker compose logs), pastikan tidak ada konflik port di 9022, dan periksa status healthcheck (docker inspect ...). Bagaimana cara update paket? Cara terbaik adalah dengan membangun ulang image: docker compose build --no-cache. Apakah bisa multi-user? Tentu. Anda bisa memodifikasi Dockerfile untuk membuat user tambahan. Kesimpulan \u0026ldquo;Bahrani Labs\u0026rdquo; adalah solusi ideal untuk siapa saja yang membutuhkan lingkungan sandbox Linux yang ringan, cepat, dan persisten. Ini sangat cocok untuk skenario eksperimen, belajar, atau bahkan sebagai target untuk otomasi build/test ringan.\nCall-to-Action Coba setup lab ini di mesin Anda, lalu kembangkan dengan menambahkan aplikasi web sederhana yang berjalan di port 8080! Ingin versi yang lebih aman untuk produksi? Nantikan artikel selanjutnya tentang hardening SSH di dalam kontainer Docker. ","permalink":"https://blog.bahrani.my.id/docs/catatan/membangun-lab-ssh-docker/","summary":"Sering kali kita membutuhkan sebuah lingkungan sandbox atau lab virtual yang ringan untuk eksperimen, development, atau sekadar mencoba perintah-perintah sistem. Menggunakan Virtual Machine (VM) penuh terkadang terasa berlebihan. Artikel ini akan memandu Anda membangun \u0026ldquo;Bahrani Labs\u0026rdquo;: sebuah lab berbasis kontainer Docker yang bisa diakses via SSH, lengkap dengan persistensi data dan konfigurasi siap pakai.\nLab ini hadir dengan fitur esensial seperti akses SSH, user cisco dengan hak sudo, volume persisten untuk data Anda, healthcheck untuk memonitor layanan, kebijakan restart otomatis, dan zona waktu yang sudah disesuaikan untuk Indonesia (Asia/Jakarta).","title":"Membangun Lab SSH Pribadi dengan Docker: Bahrani Labs"}]